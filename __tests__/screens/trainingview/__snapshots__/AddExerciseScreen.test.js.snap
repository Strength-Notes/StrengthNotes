// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<AddExerciseScreen /> renders correctly 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <RCTScrollView
    data={
      Array [
        Object {
          "data": Array [
            Object {
              "name": "Squat",
              "primary": "Weight",
              "secondary": "Reps",
            },
          ],
          "key": "Exercises",
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={
      Array [
        0,
      ]
    }
    updateCellsBatchingPeriod={50}
    windowSize={21}
  >
    <View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <Text
          style={
            Object {
              "fontSize": 24,
              "fontWeight": "bold",
            }
          }
        >
          Exercises
        </Text>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          collapsable={false}
          forwardedRef={[Function]}
          onGestureHandlerEvent={[Function]}
          onGestureHandlerStateChange={[Function]}
          onLayout={[Function]}
          style={
            Object {
              "overflow": "hidden",
            }
          }
        >
          <View
            style={
              Object {
                "bottom": 0,
                "flexDirection": "row-reverse",
                "left": 0,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "transform": Array [
                  Object {
                    "translateX": -10000,
                  },
                ],
              }
            }
          >
            <RNGestureHandlerButton
              activeOpacity={0.105}
              collapsable={false}
              onActiveStateChange={[Function]}
              onGestureEvent={[Function]}
              onGestureHandlerEvent={[Function]}
              onGestureHandlerStateChange={[Function]}
              onHandlerStateChange={[Function]}
              onPress={[Function]}
              style={
                Array [
                  Object {
                    "overflow": "hidden",
                  },
                  undefined,
                ]
              }
              underlayColor="black"
            >
              <View
                style={
                  Object {
                    "backgroundColor": "black",
                    "bottom": 0,
                    "left": 0,
                    "opacity": 0,
                    "position": "absolute",
                    "right": 0,
                    "top": 0,
                  }
                }
              />
              <Text />
            </RNGestureHandlerButton>
            <View
              onLayout={[Function]}
            />
          </View>
          <View
            collapsable={false}
            forwardedRef={[Function]}
            onGestureHandlerEvent={[Function]}
            onGestureHandlerStateChange={[Function]}
            pointerEvents="auto"
            style={
              Object {
                "transform": Array [
                  Object {
                    "translateX": -0,
                  },
                ],
              }
            }
          >
            <View
              accessible={true}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "opacity": 1,
                }
              }
            >
              <View
                style={
                  Object {
                    "backgroundColor": "white",
                    "borderRadius": 5,
                    "height": 32,
                    "margin": 2,
                    "marginLeft": 10,
                  }
                }
              >
                <Text
                  style={
                    Object {
                      "fontSize": 16,
                      "margin": 5,
                    }
                  }
                >
                  Squat
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      />
    </View>
  </RCTScrollView>
</View>
`;
